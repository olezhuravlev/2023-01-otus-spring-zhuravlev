package ru.otus.mongock.changelog;

import com.mongodb.reactivestreams.client.MongoDatabase;
import io.mongock.api.annotations.*;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.Query;
import ru.otus.restservice.config.AppProps;
import ru.otus.shared.model.Author;
import ru.otus.shared.model.Book;
import ru.otus.shared.model.BookComment;
import ru.otus.shared.model.Genre;

import java.util.ArrayList;
import java.util.List;

@ChangeUnit(id = "initRestDatabase", order = "1", author = "olezhuravlev", systemVersion = "1", transactional = false)
public class DatabaseChangelog {

    private final AppProps appProps;
    private final MongoTemplate mongoTemplate;

    private final List<Author> authors;
    private final List<Genre> genres;
    private final List<Book> books;
    private final List<BookComment> comments;

    private final String authorsCollectionName;
    private final String genresCollectionName;
    private final String booksCollectionName;
    private final String commentsCollectionName;

    public DatabaseChangelog(AppProps appProps, MongoTemplate mongoTemplate) {

        this.appProps = appProps;
        this.mongoTemplate = mongoTemplate;

        this.authorsCollectionName = appProps.authorsCollectionName();
        this.genresCollectionName = appProps.genresCollectionName();
        this.booksCollectionName = appProps.booksCollectionName();
        this.commentsCollectionName = appProps.commentsCollectionName();

        genres = new ArrayList<>();
        genres.add(new Genre("g0", "Romance"));
        genres.add(new Genre("g1", "Mystery"));
        genres.add(new Genre("g2", "Fantasy"));
        genres.add(new Genre("g3", "Sci-Fi"));
        genres.add(new Genre("g4", "Thriller"));
        genres.add(new Genre("g5", "Biography"));

        authors = new ArrayList<>(1024);
        authors.add(new Author("a0", "Adam Silvera"));
        authors.add(new Author("a1", "Agatha Christie"));
        authors.add(new Author("a2", "Alan Bradley"));
        authors.add(new Author("a3", "Aldous Huxley"));
        authors.add(new Author("a4", "Alex Michaelides"));
        authors.add(new Author("a5", "Amal El-Mohtar and Max Gladstone"));
        authors.add(new Author("a6", "Anaïs Nin"));
        authors.add(new Author("a7", "Andrzej Sapkowski"));
        authors.add(new Author("a8", "Anne McCaffrey"));
        authors.add(new Author("a9", "Anthony Burgess"));
        authors.add(new Author("a10", "Arthur C. Clarke"));
        authors.add(new Author("a11", "Attica Locke"));
        authors.add(new Author("a12", "Audrey Niffenegger"));
        authors.add(new Author("a13", "Becky Albertalli"));
        authors.add(new Author("a14", "Becky Chambers"));
        authors.add(new Author("a15", "Benjamin Alire Sáenz"));
        authors.add(new Author("a16", "Beverly Jenkins"));
        authors.add(new Author("a17", "Blanche Wiesen Cook"));
        authors.add(new Author("a18", "Brandon Sanderson"));
        authors.add(new Author("a19", "by John D. MacDonald"));
        authors.add(new Author("a20", "C. S. Lewis"));
        authors.add(new Author("a21", "Caleb Carr"));
        authors.add(new Author("a22", "Camille Perri"));
        authors.add(new Author("a23", "Carl Sagan"));
        authors.add(new Author("a24", "Carlos Ruiz Zafón"));
        authors.add(new Author("a25", "Casey McQuiston"));
        authors.add(new Author("a26", "Catherynne M. Valente"));
        authors.add(new Author("a27", "Charles Yu"));
        authors.add(new Author("a28", "Charlotte Brontë"));
        authors.add(new Author("a29", "China Miéville"));
        authors.add(new Author("a30", "Cixin Liu"));
        authors.add(new Author("a31", "Clare Lydon"));
        authors.add(new Author("a32", "Colleen Hoover"));
        authors.add(new Author("a33", "Colleen McCullough"));
        authors.add(new Author("a34", "Colson Whitehead"));
        authors.add(new Author("a35", "Dan Brown"));
        authors.add(new Author("a36", "Dan Simmons"));
        authors.add(new Author("a37", "Daniel Jose Older"));
        authors.add(new Author("a38", "Daphne du Maurier"));
        authors.add(new Author("a39", "Dashiell Hammett"));
        authors.add(new Author("a40", "David McCullough"));
        authors.add(new Author("a41", "Deborah Harkness"));
        authors.add(new Author("a42", "Dennis Lehane"));
        authors.add(new Author("a43", "Diana Gabaldon"));
        authors.add(new Author("a44", "Doris Lessing"));
        authors.add(new Author("a45", "Douglas Adams"));
        authors.add(new Author("a46", "E. L. James"));
        authors.add(new Author("a47", "E.M. Forster"));
        authors.add(new Author("a48", "Elizabeth Gaskell"));
        authors.add(new Author("a49", "Emily Brontë"));
        authors.add(new Author("a50", "Emily Giffin"));
        authors.add(new Author("a51", "Emily Henry"));
        authors.add(new Author("a52", "Emily St. John Mandel"));
        authors.add(new Author("a53", "Frank Herbert"));
        authors.add(new Author("a54", "Frederick Forsyth"));
        authors.add(new Author("a55", "Gabriel Garcia Márquez"));
        authors.add(new Author("a56", "George Orwell"));
        authors.add(new Author("a57", "George R. R. Martin"));
        authors.add(new Author("a58", "Georgette Heyer"));
        authors.add(new Author("a59", "Gillian Flynn"));
        authors.add(new Author("a60", "Gish Jen"));
        authors.add(new Author("a61", "H.G. Wells"));
        authors.add(new Author("a62", "Hafsah Faizal"));
        authors.add(new Author("a63", "Harlan Coben"));
        authors.add(new Author("a64", "Haruki Murakami"));
        authors.add(new Author("a65", "Hayden Herrera"));
        authors.add(new Author("a66", "Helen Hoang"));
        authors.add(new Author("a67", "Isaac Asimov"));
        authors.add(new Author("a68", "Isabel Allende"));
        authors.add(new Author("a69", "J. R. R. Tolkien"));
        authors.add(new Author("a70", "Jack Weatherford"));
        authors.add(new Author("a71", "James M. Cain"));
        authors.add(new Author("a72", "Jane Austen"));
        authors.add(new Author("a73", "Jasmine Guillory"));
        authors.add(new Author("a74", "Jeff VanderMeer"));
        authors.add(new Author("a75", "Jeffery Deaver"));
        authors.add(new Author("a76", "Jenny Han"));
        authors.add(new Author("a77", "Jeong Yu-jeong"));
        authors.add(new Author("a78", "John Berendt"));
        authors.add(new Author("a79", "John Green"));
        authors.add(new Author("a80", "John le Carré"));
        authors.add(new Author("a81", "Jojo Moyes"));
        authors.add(new Author("a82", "Jon Krakauer"));
        authors.add(new Author("a83", "Josephine Tey"));
        authors.add(new Author("a84", "Judy Blume"));
        authors.add(new Author("a85", "Kate Atkinson"));
        authors.add(new Author("a86", "Kazuo Ishiguro"));
        authors.add(new Author("a87", "Ken Follett"));
        authors.add(new Author("a88", "Kiera Cass"));
        authors.add(new Author("a89", "Kim Stanley Robinson"));
        authors.add(new Author("a90", "Kurt Vonnegut"));
        authors.add(new Author("a91", "Laura Hillenbrand"));
        authors.add(new Author("a92", "Laura Kinsale"));
        authors.add(new Author("a93", "Lee Child"));
        authors.add(new Author("a94", "Leïla Slimani"));
        authors.add(new Author("a95", "Leo Tolstoy"));
        authors.add(new Author("a96", "Liane Moriarty"));
        authors.add(new Author("a97", "Lincoln Michel"));
        authors.add(new Author("a98", "Lisa Jewell"));
        authors.add(new Author("a99", "Lisa Kleypas"));
        authors.add(new Author("a100", "Loretta Chase"));
        authors.add(new Author("a101", "Louise Erdich"));
        authors.add(new Author("a102", "Lucy Foley"));
        authors.add(new Author("a103", "Madeleine L'Engle"));
        authors.add(new Author("a104", "Madeline Miller"));
        authors.add(new Author("a105", "Margaret Atwood"));
        authors.add(new Author("a106", "Margaret Mitchell"));
        authors.add(new Author("a107", "Margot Lee Shetterly"));
        authors.add(new Author("a108", "Mary Shelley"));
        authors.add(new Author("a109", "Maya Banks"));
        authors.add(new Author("a110", "N.K. Jemisin"));
        authors.add(new Author("a111", "Nancy Milford"));
        authors.add(new Author("a112", "Natsuo Kirino"));
        authors.add(new Author("a113", "Neal Stephenson"));
        authors.add(new Author("a114", "Neil Gaiman"));
        authors.add(new Author("a115", "Nicholas Sparks"));
        authors.add(new Author("a116", "Nicola Griffith"));
        authors.add(new Author("a117", "Nnedi Okorafor"));
        authors.add(new Author("a118", "Nora Roberts"));
        authors.add(new Author("a119", "Ocean Vuong"));
        authors.add(new Author("a120", "Octavia Butler"));
        authors.add(new Author("a121", "Olga Ravn"));
        authors.add(new Author("a122", "Oyinkan Braithwaite"));
        authors.add(new Author("a123", "Patricia Briggs"));
        authors.add(new Author("a124", "Patricia Highsmith"));
        authors.add(new Author("a125", "Patrick Rothfuss"));
        authors.add(new Author("a126", "Paula Hawkins"));
        authors.add(new Author("a127", "PD James"));
        authors.add(new Author("a128", "Peter Swanson"));
        authors.add(new Author("a129", "Philip K. Dick"));
        authors.add(new Author("a130", "Philip Pullman"));
        authors.add(new Author("a131", "R. F. Kuang"));
        authors.add(new Author("a132", "Rainbow Rowell"));
        authors.add(new Author("a133", "Ray Bradbury"));
        authors.add(new Author("a134", "Raymond Chandler"));
        authors.add(new Author("a135", "Rebecca Skloot"));
        authors.add(new Author("a136", "Rick Riordan"));
        authors.add(new Author("a137", "Riley Sager"));
        authors.add(new Author("a138", "Rivers Solomon"));
        authors.add(new Author("a139", "Robert A. Heinlein"));
        authors.add(new Author("a140", "Robert Coram"));
        authors.add(new Author("a141", "Robert Jordan and Brandon Sanderson"));
        authors.add(new Author("a142", "Robert Kanigel"));
        authors.add(new Author("a143", "Robert Traver"));
        authors.add(new Author("a144", "Roderick Thorp"));
        authors.add(new Author("a145", "Roseanne A. Brown"));
        authors.add(new Author("a146", "Roxane Gay"));
        authors.add(new Author("a147", "Rüdiger Safranski"));
        authors.add(new Author("a148", "Ruth Ware"));
        authors.add(new Author("a149", "S. J. Watson"));
        authors.add(new Author("a150", "Sabaa Tahir"));
        authors.add(new Author("a151", "Sally Rooney"));
        authors.add(new Author("a152", "Sally Thorne"));
        authors.add(new Author("a153", "Samantha Young"));
        authors.add(new Author("a154", "Samuel R. Delany"));
        authors.add(new Author("a155", "Sarah Gailey"));
        authors.add(new Author("a156", "Sarah Pekkanen"));
        authors.add(new Author("a157", "Sarah Waters"));
        authors.add(new Author("a158", "Scott Lynch"));
        authors.add(new Author("a159", "Sebastian Faulks"));
        authors.add(new Author("a160", "Silvia Moreno-Garcia"));
        authors.add(new Author("a161", "Simon Winchester"));
        authors.add(new Author("a162", "Sir Arthur Conan Doyle"));
        authors.add(new Author("a163", "Sonia Nazario"));
        authors.add(new Author("a164", "Stanislaw Lem"));
        authors.add(new Author("a165", "Stephanie Perkins"));
        authors.add(new Author("a166", "Stephen Greenblatt"));
        authors.add(new Author("a167", "Stephen King"));
        authors.add(new Author("a168", "Stephenie Meyer"));
        authors.add(new Author("a169", "Stieg Larsson"));
        authors.add(new Author("a170", "Susan Elizabeth Phillips"));
        authors.add(new Author("a171", "Susanna Clarke"));
        authors.add(new Author("a172", "Sylvia Day"));
        authors.add(new Author("a173", "Sylvia Nasar"));
        authors.add(new Author("a174", "T. H. White"));
        authors.add(new Author("a175", "Tade Thompson"));
        authors.add(new Author("a176", "Tana French"));
        authors.add(new Author("a177", "Tana French"));
        authors.add(new Author("a178", "Ted Chiang"));
        authors.add(new Author("a179", "Terry Goodkind"));
        authors.add(new Author("a180", "Terry Pratchett"));
        authors.add(new Author("a181", "Thomas Hardy"));
        authors.add(new Author("a182", "Thomas Harris"));
        authors.add(new Author("a183", "Tom Clancy"));
        authors.add(new Author("a184", "Tomi Adeyemi"));
        authors.add(new Author("a185", "Toni Cade Bambara"));
        authors.add(new Author("a186", "Truman Capote"));
        authors.add(new Author("a187", "Ursula K. Le Guin"));
        authors.add(new Author("a188", "V. E. Schwab"));
        authors.add(new Author("a189", "W.E.B. Du Bois"));
        authors.add(new Author("a190", "Walter Isaacson"));
        authors.add(new Author("a191", "Walter M. Miller Jr."));
        authors.add(new Author("a192", "Wilkie Collins"));
        authors.add(new Author("a193", "William Gibson"));
        authors.add(new Author("a194", "William Goldman"));
        authors.add(new Author("a195", "William Shakespeare"));
        authors.add(new Author("a196", "Winston Graham"));
        authors.add(new Author("a197", "Your Name by André Aciman"));
        authors.add(new Author("a198", "Zora Neale Hurston"));
        authors.add(new Author("a199", "Zoraida Córdova"));

        books = new ArrayList<>();
        books.add(new Book("b0", "1984", authors.get(56).getId(), "", genres.get(3).getId(), ""));
        books.add(new Book("b1", "1Q84", authors.get(64).getId(), "", genres.get(3).getId(), ""));
        books.add(new Book("b2", "A Beautiful Mind", authors.get(173).getId(), genres.get(5).getId()));
        books.add(new Book("b3", "A Canticle for Leibowitz", authors.get(191).getId(), genres.get(3).getId()));
        books.add(new Book("b4", "A Clockwork Orange", authors.get(9).getId(), genres.get(3).getId()));
        books.add(new Book("b5", "A Discovery of Witches", authors.get(41).getId(), genres.get(2).getId()));
        books.add(new Book("b6", "A Long Petal of the Sea", authors.get(68).getId(), genres.get(0).getId()));
        books.add(new Book("b7", "A Song of Ice and Fire series", authors.get(57).getId(), genres.get(2).getId()));
        books.add(new Book("b8", "A Song of Wraiths and Ruin", authors.get(145).getId(), genres.get(2).getId()));
        books.add(new Book("b9", "A Walk to Remember", authors.get(115).getId(), genres.get(0).getId()));
        books.add(new Book("b10", "A Wizard of Earthsea", authors.get(187).getId(), genres.get(2).getId()));
        books.add(new Book("b11", "A Wrinkle in Time", authors.get(103).getId(), genres.get(3).getId()));
        books.add(new Book("b12", "American Gods", authors.get(114).getId(), genres.get(2).getId()));
        books.add(new Book("b13", "Ammonite", authors.get(116).getId(), genres.get(3).getId()));
        books.add(new Book("b14", "An Ember in the Ashes series", authors.get(150).getId(), genres.get(2).getId()));
        books.add(new Book("b15", "An Unkindness of Ghosts", authors.get(138).getId(), genres.get(3).getId()));
        books.add(new Book("b16", "An Untamed State", authors.get(146).getId(), genres.get(4).getId()));
        books.add(new Book("b17", "Anatomy of a Murder", authors.get(143).getId(), genres.get(1).getId()));
        books.add(new Book("b18", "And Then There Were None", authors.get(1).getId(), genres.get(1).getId()));
        books.add(new Book("b19", "Anna and the French Kiss", authors.get(165).getId(), genres.get(0).getId()));
        books.add(new Book("b20", "Anna Karenina", authors.get(95).getId(), genres.get(0).getId()));
        books.add(new Book("b21", "Annihilation", authors.get(74).getId(), genres.get(3).getId()));
        books.add(new Book("b22", "Aristotle and Dante Discover the Secrets of the Universe", authors.get(15).getId(), genres.get(0).getId()));
        books.add(new Book("b23", "Bared to You", authors.get(172).getId(), genres.get(0).getId()));
        books.add(new Book("b24", "Barracoon", authors.get(198).getId(), genres.get(5).getId()));
        books.add(new Book("b25", "Beach Read", authors.get(51).getId(), genres.get(0).getId()));
        books.add(new Book("b26", "Before I Go to Sleep", authors.get(149).getId(), genres.get(4).getId()));
        books.add(new Book("b27", "Big Little Lies", authors.get(96).getId(), genres.get(1).getId()));
        books.add(new Book("b27", "Big Little Lies", authors.get(96).getId(), genres.get(4).getId()));
        books.add(new Book("b29", "Birdsong", authors.get(159).getId(), genres.get(0).getId()));
        books.add(new Book("b30", "Bluebird, Bluebird", authors.get(11).getId(), genres.get(4).getId()));
        books.add(new Book("b31", "Boyd: The Fighter Pilot Who Changed the Art of War", authors.get(140).getId(), genres.get(5).getId()));
        books.add(new Book("b32", "Brave New World", authors.get(3).getId(), genres.get(3).getId()));
        books.add(new Book("b33", "Call Me", authors.get(197).getId(), genres.get(0).getId()));
        books.add(new Book("b34", "Case Histories", authors.get(85).getId(), genres.get(1).getId()));
        books.add(new Book("b35", "Childhood's End", authors.get(10).getId(), genres.get(3).getId()));
        books.add(new Book("b36", "Children of Blood and Bone", authors.get(184).getId(), genres.get(2).getId()));
        books.add(new Book("b37", "Contact", authors.get(23).getId(), genres.get(3).getId()));
        books.add(new Book("b38", "Da Vinci Code", authors.get(35).getId(), genres.get(4).getId()));
        books.add(new Book("b39", "Delta of Venus", authors.get(6).getId(), genres.get(0).getId()));
        books.add(new Book("b40", "Dhalgren", authors.get(154).getId(), genres.get(3).getId()));
        books.add(new Book("b41", "Do Androids Dream of Electric Sheep?", authors.get(129).getId(), genres.get(3).getId()));
        books.add(new Book("b42", "Dragonflight", authors.get(8).getId(), genres.get(2).getId()));
        books.add(new Book("b43", "Dune", authors.get(53).getId(), genres.get(3).getId()));
        books.add(new Book("b44", "Eleanor & Park", authors.get(132).getId(), genres.get(0).getId()));
        books.add(new Book("b45", "Eleanor Roosevelt", authors.get(17).getId(), genres.get(5).getId()));
        books.add(new Book("b46", "Emma", authors.get(72).getId(), genres.get(0).getId()));
        books.add(new Book("b47", "Enrique’s Journey: The Story of a Boy’s Dangerous Odyssey to Reunite With His Mother", authors.get(163).getId(), genres.get(5).getId()));
        books.add(new Book("b48", "Exhalation", authors.get(178).getId(), genres.get(3).getId()));
        books.add(new Book("b49", "Eye of the Needle", authors.get(87).getId(), genres.get(1).getId()));
        books.add(new Book("b49", "Eye of the Needle", authors.get(87).getId(), genres.get(4).getId()));
        books.add(new Book("b51", "Fangirl", authors.get(132).getId(), genres.get(0).getId()));
        books.add(new Book("b52", "Fifty Shades of Grey", authors.get(46).getId(), genres.get(0).getId()));
        books.add(new Book("b53", "Flowers from the Storm", authors.get(92).getId(), genres.get(0).getId()));
        books.add(new Book("b54", "Forever . . .", authors.get(84).getId(), genres.get(0).getId()));
        books.add(new Book("b55", "Frankenstein", authors.get(108).getId(), genres.get(3).getId()));
        books.add(new Book("b56", "Frida: A Biography of Frida Kahlo", authors.get(65).getId(), genres.get(5).getId()));
        books.add(new Book("b57", "Future Home of the Living God", authors.get(101).getId(), genres.get(3).getId()));
        books.add(new Book("b58", "Genghis Khan and the Making of the Modern World", authors.get(70).getId(), genres.get(5).getId()));
        books.add(new Book("b59", "Gods of Jade and Shadow", authors.get(160).getId(), genres.get(2).getId()));
        books.add(new Book("b60", "Gone Girl", authors.get(59).getId(), genres.get(1).getId()));
        books.add(new Book("b60", "Gone Girl", authors.get(59).getId(), genres.get(4).getId()));
        books.add(new Book("b62", "Gone with the Wind", authors.get(106).getId(), genres.get(0).getId()));
        books.add(new Book("b63", "Hidden Figures: The American Dream and the Untold Story of the Black Women Mathematicians Who Helped Win the Space Race", authors.get(107).getId(), genres.get(5).getId()));
        books.add(new Book("b64", "Hollow Crown duology", authors.get(199).getId(), genres.get(2).getId()));
        books.add(new Book("b65", "How to Live Safely in a Science Fictional Universe", authors.get(27).getId(), genres.get(3).getId()));
        books.add(new Book("b66", "Hyperion", authors.get(36).getId(), genres.get(3).getId()));
        books.add(new Book("b67", "In a Dark, Dark Wood", authors.get(148).getId(), genres.get(4).getId()));
        books.add(new Book("b68", "In Cold Blood", authors.get(186).getId(), genres.get(1).getId()));
        books.add(new Book("b68", "In Cold Blood", authors.get(186).getId(), genres.get(4).getId()));
        books.add(new Book("b70", "In the Woods", authors.get(176).getId(), genres.get(1).getId()));
        books.add(new Book("b70", "In the Woods", authors.get(176).getId(), genres.get(4).getId()));
        books.add(new Book("b72", "Indigo", authors.get(16).getId(), genres.get(0).getId()));
        books.add(new Book("b73", "Into the Wild", authors.get(82).getId(), genres.get(5).getId()));
        books.add(new Book("b74", "It Ends with Us", authors.get(32).getId(), genres.get(0).getId()));
        books.add(new Book("b75", "Jane Eyre", authors.get(28).getId(), genres.get(0).getId()));
        books.add(new Book("b76", "John Adams", authors.get(40).getId(), genres.get(5).getId()));
        books.add(new Book("b77", "John Brown", authors.get(189).getId(), genres.get(5).getId()));
        books.add(new Book("b78", "Jonathan Strange and Mr. Norrell", authors.get(171).getId(), genres.get(2).getId()));
        books.add(new Book("b79", "Killing Floor", authors.get(93).getId(), genres.get(1).getId()));
        books.add(new Book("b79", "Killing Floor", authors.get(93).getId(), genres.get(4).getId()));
        books.add(new Book("b81", "Kindred", authors.get(120).getId(), genres.get(3).getId()));
        books.add(new Book("b82", "Kiss an Angel", authors.get(170).getId(), genres.get(0).getId()));
        books.add(new Book("b83", "Lock Every Door", authors.get(137).getId(), genres.get(4).getId()));
        books.add(new Book("b84", "Lord of Scoundrels", authors.get(100).getId(), genres.get(0).getId()));
        books.add(new Book("b85", "Love in the Time of Cholera (Oprah's Book Club)", authors.get(55).getId(), genres.get(0).getId()));
        books.add(new Book("b86", "Martin Heidegger: Between Good and Evil", authors.get(147).getId(), genres.get(5).getId()));
        books.add(new Book("b87", "Maurice", authors.get(47).getId(), genres.get(0).getId()));
        books.add(new Book("b88", "Me Before You", authors.get(81).getId(), genres.get(0).getId()));
        books.add(new Book("b89", "Mercy Thompson series", authors.get(123).getId(), genres.get(2).getId()));
        books.add(new Book("b90", "Midnight in the Garden of Good and Evil", authors.get(78).getId(), genres.get(5).getId()));
        books.add(new Book("b91", "Misery", authors.get(167).getId(), genres.get(4).getId()));
        books.add(new Book("b92", "More Happy Than Not", authors.get(0).getId(), genres.get(0).getId()));
        books.add(new Book("b93", "My Sister, the Serial Killer", authors.get(122).getId(), genres.get(1).getId()));
        books.add(new Book("b93", "My Sister, the Serial Killer", authors.get(122).getId(), genres.get(4).getId()));
        books.add(new Book("b95", "Neuromancer", authors.get(193).getId(), genres.get(3).getId()));
        books.add(new Book("b96", "Never Let Me Go", authors.get(86).getId(), genres.get(3).getId()));
        books.add(new Book("b97", "Normal People", authors.get(151).getId(), genres.get(0).getId()));
        books.add(new Book("b98", "North and South", authors.get(48).getId(), genres.get(0).getId()));
        books.add(new Book("b99", "On Dublin Street", authors.get(153).getId(), genres.get(0).getId()));
        books.add(new Book("b100", "On Earth We're Briefly Gorgeous", authors.get(119).getId(), genres.get(0).getId()));
        books.add(new Book("b101", "Oryx and Crake", authors.get(105).getId(), genres.get(3).getId()));
        books.add(new Book("b102", "Out", authors.get(112).getId(), genres.get(4).getId()));
        books.add(new Book("b103", "Outlander", authors.get(43).getId(), genres.get(0).getId()));
        books.add(new Book("b104", "Percy Jackson and the Olympians series", authors.get(136).getId(), genres.get(2).getId()));
        books.add(new Book("b105", "Pride and Prejudice", authors.get(72).getId(), genres.get(0).getId()));
        books.add(new Book("b106", "Radiance", authors.get(26).getId(), genres.get(3).getId()));
        books.add(new Book("b107", "Rebecca", authors.get(38).getId(), genres.get(0).getId()));
        books.add(new Book("b107", "Rebecca", authors.get(38).getId(), genres.get(1).getId()));
        books.add(new Book("b109", "Red Mars", authors.get(89).getId(), genres.get(3).getId()));
        books.add(new Book("b110", "Red, White & Royal Blue", authors.get(25).getId(), genres.get(0).getId()));
        books.add(new Book("b111", "Romeo and Juliet", authors.get(195).getId(), genres.get(0).getId()));
        books.add(new Book("b112", "Rosewater", authors.get(175).getId(), genres.get(3).getId()));
        books.add(new Book("b113", "Ross Poldark", authors.get(196).getId(), genres.get(0).getId()));
        books.add(new Book("b114", "Rush", authors.get(109).getId(), genres.get(0).getId()));
        books.add(new Book("b115", "Savage Beauty", authors.get(111).getId(), genres.get(5).getId()));
        books.add(new Book("b116", "Secrets of a Summer Night", authors.get(99).getId(), genres.get(0).getId()));
        books.add(new Book("b117", "Sense and Sensibility", authors.get(72).getId(), genres.get(0).getId()));
        books.add(new Book("b118", "Sharp Objects", authors.get(59).getId(), genres.get(1).getId()));
        books.add(new Book("b119", "Shikasta", authors.get(44).getId(), genres.get(3).getId()));
        books.add(new Book("b120", "Shutter Island", authors.get(42).getId(), genres.get(1).getId()));
        books.add(new Book("b120", "Shutter Island", authors.get(42).getId(), genres.get(4).getId()));
        books.add(new Book("b122", "Simon vs. the Homo Sapiens Agenda", authors.get(13).getId(), genres.get(0).getId()));
        books.add(new Book("b123", "Snow Crash", authors.get(113).getId(), genres.get(3).getId()));
        books.add(new Book("b124", "Solaris", authors.get(164).getId(), genres.get(3).getId()));
        books.add(new Book("b125", "Something Borrowed", authors.get(50).getId(), genres.get(0).getId()));
        books.add(new Book("b126", "Station Eleven", authors.get(52).getId(), genres.get(3).getId()));
        books.add(new Book("b127", "Steve Jobs", authors.get(190).getId(), genres.get(5).getId()));
        books.add(new Book("b128", "Strangers on a Train", authors.get(124).getId(), genres.get(4).getId()));
        books.add(new Book("b129", "Tell No One", authors.get(63).getId(), genres.get(4).getId()));
        books.add(new Book("b130", "Tess of the D'Urbervilles", authors.get(181).getId(), genres.get(0).getId()));
        books.add(new Book("b131", "The Alienist", authors.get(21).getId(), genres.get(1).getId()));
        books.add(new Book("b132", "The Big Sleep", authors.get(134).getId(), genres.get(1).getId()));
        books.add(new Book("b133", "The Body Scout", authors.get(97).getId(), genres.get(3).getId()));
        books.add(new Book("b134", "The Bone Collector", authors.get(75).getId(), genres.get(4).getId()));
        books.add(new Book("b135", "The Book of Lost Saints", authors.get(37).getId(), genres.get(2).getId()));
        books.add(new Book("b136", "The Book of Phoenix", authors.get(117).getId(), genres.get(3).getId()));
        books.add(new Book("b137", "The Children of Men", authors.get(127).getId(), genres.get(3).getId()));
        books.add(new Book("b138", "The Chronicles of Narnia", authors.get(20).getId(), genres.get(2).getId()));
        books.add(new Book("b139", "The City & The City", authors.get(29).getId(), genres.get(3).getId()));
        books.add(new Book("b140", "The Complete Robot", authors.get(67).getId(), genres.get(3).getId()));
        books.add(new Book("b141", "The Da Vinci Code", authors.get(35).getId(), genres.get(1).getId()));
        books.add(new Book("b142", "The Daughter of Time", authors.get(83).getId(), genres.get(1).getId()));
        books.add(new Book("b143", "The Day of the Jackal", authors.get(54).getId(), genres.get(1).getId()));
        books.add(new Book("b143", "The Day of the Jackal", authors.get(54).getId(), genres.get(4).getId()));
        books.add(new Book("b145", "The Deep Blue Good", authors.get(19).getId(), genres.get(1).getId()));
        books.add(new Book("b146", "The Detective", authors.get(144).getId(), genres.get(1).getId()));
        books.add(new Book("b147", "The Discworld series", authors.get(180).getId(), genres.get(2).getId()));
        books.add(new Book("b148", "The Echo Wife", authors.get(155).getId(), genres.get(3).getId()));
        books.add(new Book("b149", "The Employees", authors.get(121).getId(), genres.get(3).getId()));
        books.add(new Book("b150", "The Fault in Our Stars", authors.get(79).getId(), genres.get(0).getId()));
        books.add(new Book("b151", "The Fellowship of the Ring", authors.get(69).getId(), genres.get(2).getId()));
        books.add(new Book("b152", "The Fifth Season", authors.get(110).getId(), genres.get(2).getId()));
        books.add(new Book("b153", "The Fifth Season", authors.get(110).getId(), genres.get(3).getId()));
        books.add(new Book("b154", "The Girl on the Train", authors.get(126).getId(), genres.get(1).getId()));
        books.add(new Book("b154", "The Girl on the Train", authors.get(126).getId(), genres.get(4).getId()));
        books.add(new Book("b156", "The Girl with the Dragon Tattoo", authors.get(169).getId(), genres.get(1).getId()));
        books.add(new Book("b156", "The Girl with the Dragon Tattoo", authors.get(169).getId(), genres.get(4).getId()));
        books.add(new Book("b158", "The Golden Compass", authors.get(130).getId(), genres.get(2).getId()));
        books.add(new Book("b159", "The Good Son", authors.get(77).getId(), genres.get(4).getId()));
        books.add(new Book("b160", "The Grand Sophy", authors.get(58).getId(), genres.get(0).getId()));
        books.add(new Book("b161", "The Guest List", authors.get(102).getId(), genres.get(4).getId()));
        books.add(new Book("b162", "The Hating Game", authors.get(152).getId(), genres.get(0).getId()));
        books.add(new Book("b163", "The Hitchhiker's Guide to the Galaxy", authors.get(45).getId(), genres.get(3).getId()));
        books.add(new Book("b164", "The Hound of the Baskervilles", authors.get(162).getId(), genres.get(1).getId()));
        books.add(new Book("b165", "The Hunt for Red October", authors.get(183).getId(), genres.get(4).getId()));
        books.add(new Book("b166", "The Immortal Life of Henrietta Lacks", authors.get(135).getId(), genres.get(5).getId()));
        books.add(new Book("b167", "The Infinity Cycle Series", authors.get(0).getId(), genres.get(2).getId()));
        books.add(new Book("b168", "The Invisible Life of Addie LaRue", authors.get(188).getId(), genres.get(2).getId()));
        books.add(new Book("b169", "The Kind Worth Killing", authors.get(128).getId(), genres.get(4).getId()));
        books.add(new Book("b170", "The Kiss Quotient", authors.get(66).getId(), genres.get(0).getId()));
        books.add(new Book("b171", "The Left Hand of Darkness", authors.get(187).getId(), genres.get(3).getId()));
        books.add(new Book("b172", "The Lies of Locke Lamora", authors.get(158).getId(), genres.get(2).getId()));
        books.add(new Book("b173", "The Long Way to a Small, Angry Planet", authors.get(14).getId(), genres.get(3).getId()));
        books.add(new Book("b174", "The Maltese Falcon", authors.get(39).getId(), genres.get(1).getId()));
        books.add(new Book("b175", "The Man Who Knew Infinity", authors.get(142).getId(), genres.get(5).getId()));
        books.add(new Book("b176", "The Martian Chronicles", authors.get(133).getId(), genres.get(3).getId()));
        books.add(new Book("b177", "The Moon Is a Harsh Mistress", authors.get(139).getId(), genres.get(3).getId()));
        books.add(new Book("b178", "The Moonstone", authors.get(192).getId(), genres.get(1).getId()));
        books.add(new Book("b179", "The Name of the Wind", authors.get(125).getId(), genres.get(2).getId()));
        books.add(new Book("b180", "The Notebook", authors.get(115).getId(), genres.get(0).getId()));
        books.add(new Book("b181", "The Once and Future King", authors.get(174).getId(), genres.get(2).getId()));
        books.add(new Book("b182", "The Perfect Nanny: A Novel", authors.get(94).getId(), genres.get(4).getId()));
        books.add(new Book("b183", "The Poppy War series", authors.get(131).getId(), genres.get(2).getId()));
        books.add(new Book("b184", "The Postman Always Rings Twice", authors.get(71).getId(), genres.get(1).getId()));
        books.add(new Book("b185", "The Princess Bride", authors.get(194).getId(), genres.get(0).getId()));
        books.add(new Book("b186", "The Professor and the Madman", authors.get(161).getId(), genres.get(5).getId()));
        books.add(new Book("b187", "The Proposal", authors.get(73).getId(), genres.get(0).getId()));
        books.add(new Book("b188", "The Rebecca Notebook: and Other Memories", authors.get(38).getId(), genres.get(4).getId()));
        books.add(new Book("b189", "The Resisters", authors.get(60).getId(), genres.get(3).getId()));
        books.add(new Book("b190", "The Selection", authors.get(88).getId(), genres.get(0).getId()));
        books.add(new Book("b191", "The Shadow of the Wind", authors.get(24).getId(), genres.get(4).getId()));
        books.add(new Book("b192", "The Shining", authors.get(167).getId(), genres.get(4).getId()));
        books.add(new Book("b193", "The Silence of the Lambs", authors.get(182).getId(), genres.get(1).getId()));
        books.add(new Book("b193", "The Silence of the Lambs", authors.get(182).getId(), genres.get(4).getId()));
        books.add(new Book("b195", "The Silent Patient", authors.get(4).getId(), genres.get(4).getId()));
        books.add(new Book("b196", "The Sirens of Titan", authors.get(90).getId(), genres.get(3).getId()));
        books.add(new Book("b197", "The Song of Achilles", authors.get(104).getId(), genres.get(0).getId()));
        books.add(new Book("b198", "The Stand", authors.get(167).getId(), genres.get(3).getId()));
        books.add(new Book("b199", "The Sweetness at the Bottom of the Pie", authors.get(2).getId(), genres.get(1).getId()));
        books.add(new Book("b200", "The Sword of Truth Series", authors.get(179).getId(), genres.get(2).getId()));
        books.add(new Book("b201", "The Talented Mr. Ripley", authors.get(124).getId(), genres.get(4).getId()));
        books.add(new Book("b202", "The Thorn Birds", authors.get(33).getId(), genres.get(0).getId()));
        books.add(new Book("b203", "The Three-Body Problem", authors.get(30).getId(), genres.get(3).getId()));
        books.add(new Book("b204", "The Time Machine", authors.get(61).getId(), genres.get(3).getId()));
        books.add(new Book("b205", "The Time Traveler's Wife", authors.get(12).getId(), genres.get(0).getId()));
        books.add(new Book("b206", "The Way of Kings", authors.get(18).getId(), genres.get(2).getId()));
        books.add(new Book("b207", "The Wheel of Time series", authors.get(141).getId(), genres.get(2).getId()));
        books.add(new Book("b208", "The Wife Between Us", authors.get(156).getId(), genres.get(4).getId()));
        books.add(new Book("b209", "The Witcher series", authors.get(7).getId(), genres.get(2).getId()));
        books.add(new Book("b210", "Then She Was Gone: A Novel", authors.get(98).getId(), genres.get(4).getId()));
        books.add(new Book("b211", "This Is How You Lose the Time War", authors.get(5).getId(), genres.get(3).getId()));
        books.add(new Book("b212", "Those Bones Are Not My Child", authors.get(185).getId(), genres.get(4).getId()));
        books.add(new Book("b213", "Tinker Tailor Soldier Spy", authors.get(80).getId(), genres.get(4).getId()));
        books.add(new Book("b214", "Tinker, Tailor, Soldier, Spy", authors.get(80).getId(), genres.get(1).getId()));
        books.add(new Book("b215", "Tipping the Velvet", authors.get(157).getId(), genres.get(0).getId()));
        books.add(new Book("b216", "To All the Boys I've Loved Before", authors.get(76).getId(), genres.get(0).getId()));
        books.add(new Book("b217", "Twice In A Lifetime", authors.get(31).getId(), genres.get(0).getId()));
        books.add(new Book("b218", "Twilight", authors.get(168).getId(), genres.get(0).getId()));
        books.add(new Book("b219", "Unbroken: A World War II Story of Survival, Resilience and Redemption", authors.get(91).getId(), genres.get(5).getId()));
        books.add(new Book("b220", "Vision in White", authors.get(118).getId(), genres.get(0).getId()));
        books.add(new Book("b221", "We Hunt the Flame", authors.get(62).getId(), genres.get(2).getId()));
        books.add(new Book("b222", "When Katie Met Cassidy", authors.get(22).getId(), genres.get(0).getId()));
        books.add(new Book("b223", "Will in the World", authors.get(166).getId(), genres.get(5).getId()));
        books.add(new Book("b224", "Woman in White", authors.get(192).getId(), genres.get(1).getId()));
        books.add(new Book("b225", "Wuthering Heights", authors.get(49).getId(), genres.get(0).getId()));
        books.add(new Book("b226", "Zone One", authors.get(34).getId(), genres.get(3).getId()));

        comments = new ArrayList<>();
        comments.add(new BookComment("bc0", "b0", "Nice, although slightly hard for reading."));
        comments.add(new BookComment("bc1", "b0", "Good reading for an intellectual reader."));
        comments.add(new BookComment("bc2", "b1", "Brilliant book!"));
        comments.add(new BookComment("bc3", "b2", "Haven't read yet, but the cover is attractive."));
        comments.add(new BookComment("bc4", "b3", "Mediocre pulp fiction."));
        comments.add(new BookComment("bc5", "b4", "Not bad, not bad."));
        comments.add(new BookComment("bc6", "b5", "A masterpiece!"));
    }

    @BeforeExecution
    public void beforeExecution(MongoTemplate mongoTemplate) {
        mongoTemplate.createCollection(authorsCollectionName);
        mongoTemplate.createCollection(genresCollectionName);
        mongoTemplate.createCollection(booksCollectionName);
        mongoTemplate.createCollection(commentsCollectionName);
    }

    @RollbackBeforeExecution
    public void rollbackBeforeExecution(MongoTemplate mongoTemplate) {
        mongoTemplate.dropCollection(authorsCollectionName);
        mongoTemplate.dropCollection(genresCollectionName);
        mongoTemplate.dropCollection(booksCollectionName);
        mongoTemplate.dropCollection(commentsCollectionName);
    }

    @Execution
    public void execution(MongoTemplate mongoTemplate, MongoDatabase mongoDatabase) {
        authors.forEach(author -> mongoTemplate.save(author, authorsCollectionName));
        genres.forEach(author -> mongoTemplate.save(author, genresCollectionName));
        books.forEach(author -> mongoTemplate.save(author, booksCollectionName));
        comments.forEach(author -> mongoTemplate.save(author, commentsCollectionName));
    }

    @RollbackExecution
    public void rollbackExecution(MongoTemplate mongoTemplate) {
        mongoTemplate.remove(new Query(), authorsCollectionName);
        mongoTemplate.remove(new Query(), genresCollectionName);
        mongoTemplate.remove(new Query(), booksCollectionName);
        mongoTemplate.remove(new Query(), commentsCollectionName);
    }
}
